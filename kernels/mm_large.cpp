// Auto-generated by CHARM CDSE-CDAC
#include "utils.h"

#define TILE_M 512
#define TILE_N 512
#define TILE_K 256

extern "C" {
void mm_large(
    const float* A,  // HBM channel 0 to 3
    const float* B,  // HBM channel 4 to 7
    float* C,
    int M, int K, int N
) {
    #pragma HLS INTERFACE m_axi port=A offset=slave bundle=gmem0
    #pragma HLS INTERFACE m_axi port=B offset=slave bundle=gmem1
    #pragma HLS INTERFACE m_axi port=C offset=slave bundle=gmem0
    #pragma HLS INTERFACE s_axilite port=return
    #pragma HLS DATAFLOW

    float local_A[TILE_M][TILE_K];
    float local_B[TILE_K][TILE_N];
    #pragma HLS ARRAY_PARTITION variable=local_A cyclic factor=32 dim=1
    #pragma HLS ARRAY_PARTITION variable=local_B cyclic factor=32 dim=2
    #pragma HLS BIND_STORAGE variable=local_A type=ram_2p impl=uram
    #pragma HLS BIND_STORAGE variable=local_B type=ram_2p impl=uram

    
    for (int ti = 0; ti < M; ti += TILE_M) {
        for (int tj = 0; tj < N; tj += TILE_N) {
            #pragma HLS LOOP_FLATTEN
            read_block<float, TILE_M, TILE_K>(A + ti*K, local_A, TILE_M, TILE_K, K);
            read_block<float, TILE_K, TILE_N>(B + tj, local_B, TILE_K, TILE_N, N);

            for (int tk = 0; tk < K; tk += TILE_K) {
                for (int i = 0; i < TILE_M; i++) {
                    for (int j = 0; j < TILE_N; j++) {
                        #pragma HLS PIPELINE II=1
                        float sum = 0;
                        for (int k = 0; k < TILE_K; k++) {
                            sum += local_A[i][k] * local_B[k][j];
                        }
                        C[(ti+i)*N + (tj+j)] = sum;
                    }
                }
            }
        }
    }
    
}
}